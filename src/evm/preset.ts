import {
  PUSHN,
  MSTORE,
  RETURN,
  COMMON_MATH_OPCODES,
  ADDRESS,
  BALANCE,
  ORIGIN,
  CALLER,
  CALLVALUE,
  CALLDATALOAD,
  CALLDATASIZE,
  CALLDATACOPY,
  MSIZE,
  CODESIZE,
  CODECOPY,
  GASPRICE,
  EXTCODESIZE,
  RETURNDATASIZE,
  RETURNDATACOPY,
  EXTCODEHASH,
  COINBASE,
  TIMESTAMP,
  NUMBER,
  PREVRANDAO,
  GASLMIT,
  CHAINID,
  SELFBALANCE,
  BASEFEE,
  POP,
  MLOAD,
  MSTORE8,
  SLOAD,
  SSTORE,
  JUMP,
  JUMPI,
  PC,
  GAS,
  JUMPDEST,
  DUPN,
  SWAPN,
  LOGN,
  CREATE,
  CALL,
  CALLCODE,
  DELEGATECALL,
  CREATE2,
  STATICCALL,
  REVERT,
  INVALID,
  SELFDESTRUCT,
} from "./opcodes";

export const PRESET_OPCODES = [
  ...COMMON_MATH_OPCODES,
  new ADDRESS(),
  new BALANCE(),
  new ORIGIN(),
  new CALLER(),
  new CALLVALUE(),
  new CALLDATALOAD(),
  new CALLDATASIZE(),
  new CALLDATACOPY(),
  new CODESIZE(),
  new CODECOPY(),
  new GASPRICE(),
  new EXTCODESIZE(),
  new EXTCODESIZE(),
  new RETURNDATASIZE(),
  new RETURNDATACOPY(),
  new EXTCODEHASH(),
  new COINBASE(),
  new TIMESTAMP(),
  new NUMBER(),
  new PREVRANDAO(),
  new GASLMIT(),
  new CHAINID(),
  new SELFBALANCE(),
  new BASEFEE(),
  new POP(),
  new MLOAD(),
  new MSTORE(),
  new MSTORE8(),
  new SLOAD(),
  new SSTORE(),
  new JUMP(),
  new JUMPI(),
  new PC(),
  new MSIZE(),
  new GAS(),
  new JUMPDEST(),
  ...Array.from({ length: 33 }, (_, i) => new PUSHN(BigInt(i))),
  ...Array.from({ length: 16 }, (_, i) => new DUPN(BigInt(i + 1))),
  ...Array.from({ length: 16 }, (_, i) => new SWAPN(BigInt(i + 1))),
  ...Array.from({ length: 5 }, (_, i) => new LOGN(BigInt(i))),
  new CREATE(),
  new CALL(),
  new CALLCODE(),
  new RETURN(),
  new DELEGATECALL(),
  new CREATE2(),
  new STATICCALL(),
  new REVERT(),
  new INVALID(),
  new SELFDESTRUCT(),
  new RETURN(),
];
